unit uTasks;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB,
  Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids, Vcl.Menus, Data.Win.ADODB,
  Vcl.StdActns, Vcl.DBActns, System.Actions, Vcl.ActnList,
  Vcl.PlatformDefaultStyleActnCtrls, Vcl.ActnMan, Vcl.DBCtrls, Vcl.Mask;

type
  TfTasks = class(TForm)
    pnlGrid: TPanel;
    pnlControls: TPanel;
    dbgrdTasks: TDBGrid;
    GridPanel1: TGridPanel;
    btnAdd: TButton;
    btnEdit: TButton;
    btnDelete: TButton;
    btnCancel: TButton;
    btnSave: TButton;
    btnStart: TButton;
    btnFinish: TButton;
    qryTasks: TADOQuery;
    dsTasks: TDataSource;
    atncfldTasksid: TAutoIncField;
    intgrfldTasksday_id: TIntegerField;
    qryTaskstitle: TWideStringField;
    qryTasksdescription: TWideMemoField;
    qryTasksdue_date: TStringField;
    qryTasksis_active: TBooleanField;
    qryTaskscreated_at: TWideStringField;
    qryTasksupdated_at: TWideStringField;
    qryTasksstarted_at: TWideStringField;
    qryTasksfinished_at: TWideStringField;
    pmRightClick: TPopupMenu;
    Start1: TMenuItem;
    Start2: TMenuItem;
    pnlInputs: TPanel;
    lblTtile: TLabel;
    dbedttitle: TDBEdit;
    lblDescription: TLabel;
    dbmmodescription: TDBMemo;
    lbl: TLabel;
    dbedtdue_date: TDBEdit;
    lbl1: TLabel;
    dbedtcreated_at: TDBEdit;
    lbl2: TLabel;
    dbedtstarted_at: TDBEdit;
    lbl3: TLabel;
    dbedtfinished_at: TDBEdit;
    actmgr1: TActionManager;
    DatasetInsert1: TDataSetInsert;
    DatasetDelete1: TDataSetDelete;
    DatasetEdit1: TDataSetEdit;
    DatasetPost1: TDataSetPost;
    DatasetCancel1: TDataSetCancel;
    btnBack: TButton;
    WindowClose1: TWindowClose;
    edtDayId: TEdit;
    lblDayId: TLabel;
    lbl4: TLabel;
    dbedtUpdated_at: TDBEdit;
    btnCopy: TButton;
    procedure btnFinishClick(Sender: TObject);
    procedure WindowClose1Execute(Sender: TObject);
    procedure btnStartClick(Sender: TObject);
    procedure DatasetDelete1Execute(Sender: TObject);
    procedure dsTasksStateChange(Sender: TObject);
    procedure qryTasksAfterInsert(DataSet: TDataSet);
    procedure qryTasksBeforeInsert(DataSet: TDataSet);
    procedure qryTasksBeforePost(DataSet: TDataSet);
    procedure btnCopyClick(Sender: TObject);
  private
    procedure RefreshGrid;
    procedure SetControlsEnabledStatus(enabled: Boolean);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fTasks: TfTasks;

implementation

uses
  uDataModule, uDaySelector;

{$R *.dfm}

procedure TfTasks.btnCopyClick(Sender: TObject);
var
  fdaysSelector: TfDaysSelector;
begin
    fdaysSelector := TfDaysSelector.Create(self);
    with qryd do
    begin
      with qryTasks do
      begin
        SQL.Add(' AND day_id = ' + qryDaysid.AsString);
        Close;
        Open;
      end;
      edtDayId.Text := qryDaysid.AsString;
      ShowModal;
      Free;
    end;
  end;
end;

procedure TfTasks.btnFinishClick(Sender: TObject);
var
  sSqlCmd: string;
begin
  if qryTasks.RecordCount = 0 then
    exit;
  sSqlCmd := 'UPDATE tblTasks SET finished_at = GETDATE() WHERE id =:Task_Id ';
  with DataModule1 do
  begin
    cmd1.CommandText := sSqlCmd;
    cmd1.Parameters.ParamByName('Task_Id').Value := qryTasks.FieldByName('id').AsString;
    cmd1.Execute;
  end;
  RefreshGrid;
end;

procedure TfTasks.btnStartClick(Sender: TObject);
var
  sSqlCmd: string;
begin

  if qryTasks.RecordCount = 0 then
    exit;
  if qryTasksstarted_at.AsString <> '' then
  begin
    if MessageDlg('The task is running! Are you sure you want to restart?', TMsgDlgType.mtWarning, [TMsgDlgBtn.mbYes, TMsgDlgBtn.mbNo], 0) <> mrYes then
    begin
      Exit;
    end;
  end;
  sSqlCmd := 'UPDATE tblTasks SET started_at = GETDATE(),finished_at = NULL WHERE id =:Task_Id ';
  with DataModule1 do
  begin
    cmd1.CommandText := sSqlCmd;
    cmd1.Parameters.ParamByName('Task_Id').Value := qryTasks.FieldByName('id').AsString;
    cmd1.Execute;
  end;
  RefreshGrid;
end;

procedure TfTasks.DatasetDelete1Execute(Sender: TObject);
begin
  if MessageDlg('Are you sure you want to delete?', TMsgDlgType.mtConfirmation, [TMsgDlgBtn.mbYes, TMsgDlgBtn.mbNo], 0) = mrYes then
    qryTasks.Delete;
end;

procedure TfTasks.dsTasksStateChange(Sender: TObject);
begin
  if qryTasks.State in [dsEdit, dsInsert] then
  begin
    SetControlsEnabledStatus(True);
  end
  else
  begin
    SetControlsEnabledStatus(False);
  end;

end;

procedure TfTasks.RefreshGrid;
begin
  qryTasks.Close;
  qryTasks.Open;
end;

procedure TfTasks.SetControlsEnabledStatus(enabled: Boolean);
begin
  dbedttitle.Enabled := enabled;
  dbmmodescription.Enabled := enabled;
  dbedtdue_date.Enabled := enabled;
end;

procedure TfTasks.qryTasksAfterInsert(DataSet: TDataSet);
begin
  dbedttitle.SetFocus;
end;

procedure TfTasks.qryTasksBeforeInsert(DataSet: TDataSet);
var
  sSqlCmd: string;
begin

end;

procedure TfTasks.qryTasksBeforePost(DataSet: TDataSet);
var
  sSqlCmd: string;
begin
  qryTasks.FieldByName('day_id').Value := edtDayId.Text;
  if qryTasks.State = dsEdit then
  begin
    sSqlCmd := 'UPDATE tblTasks SET updated_at = GETDATE() WHERE id =:Task_Id ';
    with DataModule1 do
    begin
      cmd1.CommandText := sSqlCmd;
      cmd1.Parameters.ParamByName('Task_Id').Value := qryTasks.FieldByName('id').AsString;
      cmd1.Execute;
    end;
    RefreshGrid;
  end
//  else if qryTasks.State = dsInsert then
//  begin
//    sSqlCmd := 'UPDATE tblTasks SET created_at = GETDATE() WHERE id =:Task_Id ';
//    with DataModule1 do
//    begin
//      cmd1.CommandText := sSqlCmd;
//      cmd1.Parameters.ParamByName('Task_Id').Value := qryTasks.FieldByName('id').AsString;
//      cmd1.Execute;
//    end;
//    RefreshGrid;
//  end
end;

procedure TfTasks.WindowClose1Execute(Sender: TObject);
begin
  Self.Close;
end;

end.

